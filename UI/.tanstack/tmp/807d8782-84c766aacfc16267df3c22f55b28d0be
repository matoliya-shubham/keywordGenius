/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedUsersRouteImport } from './routes/_authenticated/users'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedSeoRouteImport } from './routes/_authenticated/seo'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedProfileIndexRouteImport } from './routes/_authenticated/profile/index'
import { Route as AuthenticatedSeoResearchRouteImport } from './routes/_authenticated/seo/research'
import { Route as AuthenticatedSeoProgressRouteImport } from './routes/_authenticated/seo/progress'
import { Route as AuthenticatedProfileEditRouteImport } from './routes/_authenticated/profile/edit'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedUsersRoute = AuthenticatedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedSeoRoute = AuthenticatedSeoRouteImport.update({
  id: '/seo',
  path: '/seo',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileIndexRoute =
  AuthenticatedProfileIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedProfileRoute,
  } as any)
const AuthenticatedSeoResearchRoute =
  AuthenticatedSeoResearchRouteImport.update({
    id: '/research',
    path: '/research',
    getParentRoute: () => AuthenticatedSeoRoute,
  } as any)
const AuthenticatedSeoProgressRoute =
  AuthenticatedSeoProgressRouteImport.update({
    id: '/progress',
    path: '/progress',
    getParentRoute: () => AuthenticatedSeoRoute,
  } as any)
const AuthenticatedProfileEditRoute =
  AuthenticatedProfileEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => AuthenticatedProfileRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof AuthenticatedProfileRouteWithChildren
  '/seo': typeof AuthenticatedSeoRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRoute
  '/users': typeof AuthenticatedUsersRoute
  '/profile/edit': typeof AuthenticatedProfileEditRoute
  '/seo/progress': typeof AuthenticatedSeoProgressRoute
  '/seo/research': typeof AuthenticatedSeoResearchRoute
  '/profile/': typeof AuthenticatedProfileIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/seo': typeof AuthenticatedSeoRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRoute
  '/users': typeof AuthenticatedUsersRoute
  '/profile/edit': typeof AuthenticatedProfileEditRoute
  '/seo/progress': typeof AuthenticatedSeoProgressRoute
  '/seo/research': typeof AuthenticatedSeoResearchRoute
  '/profile': typeof AuthenticatedProfileIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/profile': typeof AuthenticatedProfileRouteWithChildren
  '/_authenticated/seo': typeof AuthenticatedSeoRouteWithChildren
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_authenticated/users': typeof AuthenticatedUsersRoute
  '/_authenticated/profile/edit': typeof AuthenticatedProfileEditRoute
  '/_authenticated/seo/progress': typeof AuthenticatedSeoProgressRoute
  '/_authenticated/seo/research': typeof AuthenticatedSeoResearchRoute
  '/_authenticated/profile/': typeof AuthenticatedProfileIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/seo'
    | '/settings'
    | '/users'
    | '/profile/edit'
    | '/seo/progress'
    | '/seo/research'
    | '/profile/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/seo'
    | '/settings'
    | '/users'
    | '/profile/edit'
    | '/seo/progress'
    | '/seo/research'
    | '/profile'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/profile'
    | '/_authenticated/seo'
    | '/_authenticated/settings'
    | '/_authenticated/users'
    | '/_authenticated/profile/edit'
    | '/_authenticated/seo/progress'
    | '/_authenticated/seo/research'
    | '/_authenticated/profile/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/seo': {
      id: '/_authenticated/seo'
      path: '/seo'
      fullPath: '/seo'
      preLoaderRoute: typeof AuthenticatedSeoRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile/': {
      id: '/_authenticated/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof AuthenticatedProfileIndexRouteImport
      parentRoute: typeof AuthenticatedProfileRoute
    }
    '/_authenticated/seo/research': {
      id: '/_authenticated/seo/research'
      path: '/research'
      fullPath: '/seo/research'
      preLoaderRoute: typeof AuthenticatedSeoResearchRouteImport
      parentRoute: typeof AuthenticatedSeoRoute
    }
    '/_authenticated/seo/progress': {
      id: '/_authenticated/seo/progress'
      path: '/progress'
      fullPath: '/seo/progress'
      preLoaderRoute: typeof AuthenticatedSeoProgressRouteImport
      parentRoute: typeof AuthenticatedSeoRoute
    }
    '/_authenticated/profile/edit': {
      id: '/_authenticated/profile/edit'
      path: '/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof AuthenticatedProfileEditRouteImport
      parentRoute: typeof AuthenticatedProfileRoute
    }
  }
}

interface AuthenticatedProfileRouteChildren {
  AuthenticatedProfileEditRoute: typeof AuthenticatedProfileEditRoute
  AuthenticatedProfileIndexRoute: typeof AuthenticatedProfileIndexRoute
}

const AuthenticatedProfileRouteChildren: AuthenticatedProfileRouteChildren = {
  AuthenticatedProfileEditRoute: AuthenticatedProfileEditRoute,
  AuthenticatedProfileIndexRoute: AuthenticatedProfileIndexRoute,
}

const AuthenticatedProfileRouteWithChildren =
  AuthenticatedProfileRoute._addFileChildren(AuthenticatedProfileRouteChildren)

interface AuthenticatedSeoRouteChildren {
  AuthenticatedSeoProgressRoute: typeof AuthenticatedSeoProgressRoute
  AuthenticatedSeoResearchRoute: typeof AuthenticatedSeoResearchRoute
}

const AuthenticatedSeoRouteChildren: AuthenticatedSeoRouteChildren = {
  AuthenticatedSeoProgressRoute: AuthenticatedSeoProgressRoute,
  AuthenticatedSeoResearchRoute: AuthenticatedSeoResearchRoute,
}

const AuthenticatedSeoRouteWithChildren =
  AuthenticatedSeoRoute._addFileChildren(AuthenticatedSeoRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRouteWithChildren
  AuthenticatedSeoRoute: typeof AuthenticatedSeoRouteWithChildren
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRouteWithChildren,
  AuthenticatedSeoRoute: AuthenticatedSeoRouteWithChildren,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
  AuthenticatedUsersRoute: AuthenticatedUsersRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
