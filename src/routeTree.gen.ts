/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SeoRouteImport } from './routes/seo'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SeoResearchRouteImport } from './routes/seo/research'
import { Route as SeoProgressRouteImport } from './routes/seo/progress'
import { Route as ProfileEditRouteImport } from './routes/profile/edit'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SeoRoute = SeoRouteImport.update({
  id: '/seo',
  path: '/seo',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SeoResearchRoute = SeoResearchRouteImport.update({
  id: '/research',
  path: '/research',
  getParentRoute: () => SeoRoute,
} as any)
const SeoProgressRoute = SeoProgressRouteImport.update({
  id: '/progress',
  path: '/progress',
  getParentRoute: () => SeoRoute,
} as any)
const ProfileEditRoute = ProfileEditRouteImport.update({
  id: '/edit',
  path: '/edit',
  getParentRoute: () => ProfileRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/seo': typeof SeoRouteWithChildren
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/profile/edit': typeof ProfileEditRoute
  '/seo/progress': typeof SeoProgressRoute
  '/seo/research': typeof SeoResearchRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/seo': typeof SeoRouteWithChildren
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/profile/edit': typeof ProfileEditRoute
  '/seo/progress': typeof SeoProgressRoute
  '/seo/research': typeof SeoResearchRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/profile': typeof ProfileRouteWithChildren
  '/seo': typeof SeoRouteWithChildren
  '/settings': typeof SettingsRoute
  '/users': typeof UsersRoute
  '/profile/edit': typeof ProfileEditRoute
  '/seo/progress': typeof SeoProgressRoute
  '/seo/research': typeof SeoResearchRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/profile'
    | '/seo'
    | '/settings'
    | '/users'
    | '/profile/edit'
    | '/seo/progress'
    | '/seo/research'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/profile'
    | '/seo'
    | '/settings'
    | '/users'
    | '/profile/edit'
    | '/seo/progress'
    | '/seo/research'
  id:
    | '__root__'
    | '/'
    | '/profile'
    | '/seo'
    | '/settings'
    | '/users'
    | '/profile/edit'
    | '/seo/progress'
    | '/seo/research'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProfileRoute: typeof ProfileRouteWithChildren
  SeoRoute: typeof SeoRouteWithChildren
  SettingsRoute: typeof SettingsRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/seo': {
      id: '/seo'
      path: '/seo'
      fullPath: '/seo'
      preLoaderRoute: typeof SeoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/seo/research': {
      id: '/seo/research'
      path: '/research'
      fullPath: '/seo/research'
      preLoaderRoute: typeof SeoResearchRouteImport
      parentRoute: typeof SeoRoute
    }
    '/seo/progress': {
      id: '/seo/progress'
      path: '/progress'
      fullPath: '/seo/progress'
      preLoaderRoute: typeof SeoProgressRouteImport
      parentRoute: typeof SeoRoute
    }
    '/profile/edit': {
      id: '/profile/edit'
      path: '/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof ProfileEditRouteImport
      parentRoute: typeof ProfileRoute
    }
  }
}

interface ProfileRouteChildren {
  ProfileEditRoute: typeof ProfileEditRoute
}

const ProfileRouteChildren: ProfileRouteChildren = {
  ProfileEditRoute: ProfileEditRoute,
}

const ProfileRouteWithChildren =
  ProfileRoute._addFileChildren(ProfileRouteChildren)

interface SeoRouteChildren {
  SeoProgressRoute: typeof SeoProgressRoute
  SeoResearchRoute: typeof SeoResearchRoute
}

const SeoRouteChildren: SeoRouteChildren = {
  SeoProgressRoute: SeoProgressRoute,
  SeoResearchRoute: SeoResearchRoute,
}

const SeoRouteWithChildren = SeoRoute._addFileChildren(SeoRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProfileRoute: ProfileRouteWithChildren,
  SeoRoute: SeoRouteWithChildren,
  SettingsRoute: SettingsRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
